Таблица:
1023  0xFFC00000  	Таблица страниц для верхних 4 МБ физической памяти 
1022  0xFF800000
.
.
3     0x00C00000	Таблицы страниц для соответствующих [8МБ, 12МБ) физической памяти                   
2     0x00800000	Таблицы страниц для соответствующих [4МБ, 8МБ) физической памяти
1     0x00400000	Таблицы страниц для соответствующих [0,4МБ) физической памяти
0     0x00000000

Базовый вирт. адр. = номер записи << 22 (PDXSHIFT)

1.) Почему пользовательские программы не смогут читать или писать в память ядра?
Поскольку и память ядра, и память пользователя присутствуют в адресном пространстве каждого приложения, мы должны использовать биты разрешений в наших таблицах страниц, чтобы разрешить пользователю доступ только к пользовательской части адресного пространства. 
Пользовательские приложения не будут иметь разрешений на любую память выше ULIM, в то время как ядро сможет читать и писать в эту память. Для диапазона адресов [UTOP, ULIM) и ядро, и пользовательское приложение имеют одинаковое разрешение: они могут читать, но не писать в этот диапазон адресов. Этот диапазон адресов используется для предоставления определенных структур данных ядра пользовательским процессам только для чтения. Наконец, адресное пространство ниже UTOP доступно для использования пользовательским приложением; приложение может задавать разрешения для доступа к этой памяти.

2.) Какие конкретные механизмы защищают память ядра?
	- только в режиме ядра все стр. адресуемы
	- обращение к памяти проверяется на аппаратном уровне, если обращение некорректно, прерывание или исключение
	- сегмент является единицей защиты памяти. 
	параметры защиты (размер сегмента, тип, привилегии(DPL) и т.п.) хранятся в сегментном регистре, сопоставленном адресуемому в данный момент сегменту памяти.

3.) Каков максимальный объем физической памяти, который данная операционная система может поддерживать? Почему?
для 32-ух битной архитектуры это пространство в 4ГБайт
10 бит - PDE
10 бит - PTE
12 бит - OFFSET 
2^10 * 2^10 * 2^12 = 2^32 = 4294967296 бит = 4 ГБайт

4.) Сколько дополнительных затрат памяти потребовалось бы для управления памятью, если мы на самом деле имели максимальный объем физической памяти? На какие части эти накладные расходы разбиты?

Нужна память для хранения различной информации о страницах, сегментах. Структуры в файле mmu.h Segdesc, Gatedesc, Pseudodesc, проверка прав и ограничений.

5.) В какой точке мы переходим к использованию EIP выше KERNBASE?
	mov	$relocated, %eax
	jmp	*%eax 

6.) Что делает возможным продолжение выполнения с низким EIP между моментом, когда мы включаем страничную организацию, и моментом, когда мы начинаем использовать EIP выше KERNBASE? Почему этот переход необходим?

Т.к. флаг CR0_PG установлен, то адрес перехода видется как виртуальный, но память, расположенная в [KERNBASE, KERNBASE + 4MB) отображается на [0, 4MB) и переход проходит нормально.
Т.к. ядро загружается в память 1MB, а код на С привязан к памяти KERNBASE + 1MB, то функция i386_init будет вызвана по неправильному адрессу, что приведет к ошибке Triple Fault.
